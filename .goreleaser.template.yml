env:
- GOPROXY=https://proxy.golang.org|direct
- GO111MODULE=on
- CGO_ENABLED=0
- PKG=github.com/operator-framework/rukpak/internal/version
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: unpack
    main: ./cmd/unpack
    binary: unpack
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    ldflags:
    - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
  - id: plain
    main: ./internal/provisioner/plain
    binary: plain
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    ldflags:
    - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
  - id: registry
    main: ./internal/provisioner/registry
    binary: registry
    goos:
      - linux
    goarch:
      - amd64
      - arm64
      - ppc64le
      - s390x
    ldflags:
      - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
  - id: core
    main: ./cmd/core
    binary: core
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    ldflags:
    - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
  - id: uploadmgr
    main: ./cmd/uploadmgr
    binary: uploadmgr
    goos:
      - linux
    goarch:
      - amd64
      - arm64
      - ppc64le
      - s390x
    ldflags:
      - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
  - id: crdvalidator
    main: ./cmd/crdvalidator
    binary: crdvalidator
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    ldflags:
    - -X {{ .Env.PKG }}.GitCommit={{ .ShortCommit }}
dockers:
- image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
  dockerfile: Dockerfile
  use: buildx
  goos: linux
  goarch: amd64
  build_flag_templates:
  - --platform=linux/amd64
- image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
  dockerfile: Dockerfile
  use: buildx
  goos: linux
  goarch: arm64
  build_flag_templates:
  - --platform=linux/arm64
- image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
  dockerfile: Dockerfile
  use: buildx
  goos: linux
  goarch: ppc64le
  build_flag_templates:
  - --platform=linux/ppc64le
- image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
  dockerfile: Dockerfile
  use: buildx
  goos: linux
  goarch: s390x
  build_flag_templates:
  - --platform=linux/s390x
docker_manifests:
- name_template: "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}"
  image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ incpatch .Version }}-next"
changelog:
  use: github-native
  skip: $DISABLE_RELEASE_PIPELINE
release:
  disable: $DISABLE_RELEASE_PIPELINE
  extra_files:
  - glob: 'rukpak.yaml'
  header: |
    ## Installation

    ```bash
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ .Env.CERT_MGR_VERSION }}/cert-manager.yaml
    kubectl wait --for=condition=Available --namespace=cert-manager deployment/cert-manager-webhook --timeout=60s
    kubectl apply -f https://github.com/operator-framework/rukpak/releases/download/{{ .Tag }}/rukpak.yaml
    kubectl wait --for=condition=Available --namespace=rukpak-system deployment/plain-provisioner --timeout=60s
    kubectl wait --for=condition=Available --namespace=rukpak-system deployment/registry-provisioner --timeout=60s
    kubectl wait --for=condition=Available --namespace=rukpak-system deployment/rukpak-core-webhook --timeout=60s
    kubectl wait --for=condition=Available --namespace=rukpak-system deployment/upload-manager --timeout=60s
    kubectl wait --for=condition=Available --namespace=crdvalidator-system deployment/crd-validation-webhook --timeout=60s
    ```
